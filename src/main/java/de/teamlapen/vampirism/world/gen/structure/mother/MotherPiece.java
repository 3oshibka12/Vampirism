package de.teamlapen.vampirism.world.gen.structure.mother;

import de.teamlapen.vampirism.blocks.LogBlock;
import de.teamlapen.vampirism.core.ModBlocks;
import de.teamlapen.vampirism.core.ModStructures;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.util.RandomSource;
import net.minecraft.world.level.ChunkPos;
import net.minecraft.world.level.StructureManager;
import net.minecraft.world.level.WorldGenLevel;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.chunk.ChunkGenerator;
import net.minecraft.world.level.levelgen.structure.BoundingBox;
import net.minecraft.world.level.levelgen.structure.ScatteredFeaturePiece;
import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

public class MotherPiece extends ScatteredFeaturePiece {

    public MotherPiece(RandomSource random, int x, int z) {
        super(ModStructures.MOTHER_PIECE.get(), x, 64, z, 18, 14, 18, Direction.Plane.HORIZONTAL.getRandomDirection(random));
    }

    public MotherPiece(CompoundTag tag) {
        super(ModStructures.MOTHER_PIECE.get(), tag);
    }

    @Override
    protected void placeBlock(@NotNull WorldGenLevel p_73435_, @NotNull BlockState p_73436_, int p_73437_, int p_73438_, int p_73439_, @NotNull BoundingBox p_73440_) {
        super.placeBlock(p_73435_, p_73436_, p_73437_ + 3, p_73438_, p_73439_ + 3, p_73440_);
    }

    @Override
    public void postProcess(@NotNull WorldGenLevel level, @NotNull StructureManager structureManager, @NotNull ChunkGenerator chunkGenerator, @NotNull RandomSource random, @NotNull BoundingBox box, @NotNull ChunkPos chunkPos, @NotNull BlockPos blockPos) {
        if (updateAverageGroundHeight(level, box, -12)) {
            placeRoots(level, box, random);
        }
    }

    protected void placeRoots(@NotNull WorldGenLevel level, @NotNull BoundingBox box, @NotNull RandomSource random) {
        BlockState state0 = ModBlocks.REMAINS.get().defaultBlockState();
        BlockState state1 = ModBlocks.CURSED_SPRUCE_WOOD.get().defaultBlockState().setValue(LogBlock.AXIS, Direction.Axis.Y);
        BlockState state2 = ModBlocks.CURSED_SPRUCE_WOOD.get().defaultBlockState().setValue(LogBlock.AXIS, Direction.Axis.Z);
        BlockState state3 = ModBlocks.CURSED_SPRUCE_WOOD.get().defaultBlockState().setValue(LogBlock.AXIS, Direction.Axis.X);
        BlockState state4 = ModBlocks.CURSED_SPRUCE_LOG.get().defaultBlockState().setValue(LogBlock.AXIS, Direction.Axis.Y);
        BlockState state5 = Blocks.AIR.defaultBlockState();
        BlockState state6 = ModBlocks.MOTHER.get().defaultBlockState();


        BiConsumer<BlockState, BlockPos> block = (state, pos) -> placeBlock(level, state, pos.getX(), pos.getY(), pos.getZ(), box);
        Consumer<BlockPos> remains = (pos) -> placeBlock(level, state0, pos.getX(), pos.getY(), pos.getZ(), box);
        {
            BlockPos pos = new BlockPos(0, 0, 0);
            remains.accept(pos.offset(1, 0, 9));
            remains.accept(pos.offset(2, 0, 12));
            remains.accept(pos.offset(2, 0, 13));
            remains.accept(pos.offset(6, 0, 12));
            remains.accept(pos.offset(6, 0, 13));
            remains.accept(pos.offset(6, 0, 14));
            remains.accept(pos.offset(8, 0, 3));
            remains.accept(pos.offset(8, 0, 4));
            remains.accept(pos.offset(9, 0, 2));
            remains.accept(pos.offset(9, 0, 3));
            remains.accept(pos.offset(0, 1, 5));
            remains.accept(pos.offset(1, 1, 5));
            remains.accept(pos.offset(1, 1, 9));
            remains.accept(pos.offset(2, 1, 5));
            remains.accept(pos.offset(2, 1, 6));
            remains.accept(pos.offset(2, 1, 7));
            remains.accept(pos.offset(2, 1, 9));
            remains.accept(pos.offset(2, 1, 11));
            remains.accept(pos.offset(2, 1, 12));
            remains.accept(pos.offset(3, 1, 11));
            remains.accept(pos.offset(5, 1, 1));
            remains.accept(pos.offset(5, 1, 2));
            remains.accept(pos.offset(5, 1, 11));
            remains.accept(pos.offset(5, 1, 12));
            remains.accept(pos.offset(6, 1, 2));
            remains.accept(pos.offset(6, 1, 3));
            remains.accept(pos.offset(6, 1, 4));
            remains.accept(pos.offset(6, 1, 12));
            remains.accept(pos.offset(8, 1, 0));
            remains.accept(pos.offset(8, 1, 1));
            remains.accept(pos.offset(8, 1, 4));
            remains.accept(pos.offset(8, 1, 5));
            remains.accept(pos.offset(8, 1, 7));
            remains.accept(pos.offset(10, 1, 10));
            remains.accept(pos.offset(10, 1, 11));
            remains.accept(pos.offset(11, 1, 1));
            remains.accept(pos.offset(11, 1, 2));
            remains.accept(pos.offset(11, 1, 15));
            remains.accept(pos.offset(11, 1, 16));
            remains.accept(pos.offset(12, 1, 4));
            remains.accept(pos.offset(12, 1, 5));
            remains.accept(pos.offset(12, 1, 10));
            remains.accept(pos.offset(12, 1, 16));
            remains.accept(pos.offset(13, 1, 3));
            remains.accept(pos.offset(13, 1, 4));
            remains.accept(pos.offset(13, 1, 10));
            remains.accept(pos.offset(14, 1, 6));
            remains.accept(pos.offset(14, 1, 14));
            remains.accept(pos.offset(15, 1, 4));
            remains.accept(pos.offset(15, 1, 6));
            remains.accept(pos.offset(15, 1, 14));
            remains.accept(pos.offset(16, 1, 6));
            remains.accept(pos.offset(16, 1, 11));
            remains.accept(pos.offset(16, 1, 14));
            remains.accept(pos.offset(17, 1, 6));
            remains.accept(pos.offset(17, 1, 11));
            remains.accept(pos.offset(2, 2, 3));
            remains.accept(pos.offset(2, 2, 4));
            remains.accept(pos.offset(2, 2, 7));
            remains.accept(pos.offset(2, 2, 8));
            remains.accept(pos.offset(2, 2, 9));
            remains.accept(pos.offset(2, 2, 10));
            remains.accept(pos.offset(3, 2, 4));
            remains.accept(pos.offset(3, 2, 5));
            remains.accept(pos.offset(3, 2, 8));
            remains.accept(pos.offset(3, 2, 11));
            remains.accept(pos.offset(4, 2, 11));
            remains.accept(pos.offset(5, 2, 10));
            remains.accept(pos.offset(5, 2, 11));
            remains.accept(pos.offset(6, 2, 4));
            remains.accept(pos.offset(6, 2, 5));
            remains.accept(pos.offset(8, 2, 1));
            remains.accept(pos.offset(8, 2, 5));
            remains.accept(pos.offset(8, 2, 7));
            remains.accept(pos.offset(8, 2, 8));
            remains.accept(pos.offset(9, 2, 1));
            remains.accept(pos.offset(9, 2, 2));
            remains.accept(pos.offset(9, 2, 5));
            remains.accept(pos.offset(9, 2, 6));
            remains.accept(pos.offset(9, 2, 8));
            remains.accept(pos.offset(9, 2, 16));
            remains.accept(pos.offset(9, 2, 17));
            remains.accept(pos.offset(10, 2, 2));
            remains.accept(pos.offset(10, 2, 3));
            remains.accept(pos.offset(10, 2, 9));
            remains.accept(pos.offset(10, 2, 10));
            remains.accept(pos.offset(10, 2, 13));
            remains.accept(pos.offset(10, 2, 14));
            remains.accept(pos.offset(10, 2, 15));
            remains.accept(pos.offset(11, 2, 2));
            remains.accept(pos.offset(11, 2, 5));
            remains.accept(pos.offset(11, 2, 6));
            remains.accept(pos.offset(11, 2, 8));
            remains.accept(pos.offset(11, 2, 15));
            remains.accept(pos.offset(12, 2, 5));
            remains.accept(pos.offset(12, 2, 8));
            remains.accept(pos.offset(12, 2, 9));
            remains.accept(pos.offset(12, 2, 10));
            remains.accept(pos.offset(13, 2, 6));
            remains.accept(pos.offset(13, 2, 14));
            remains.accept(pos.offset(14, 2, 5));
            remains.accept(pos.offset(14, 2, 6));
            remains.accept(pos.offset(14, 2, 14));
            remains.accept(pos.offset(15, 2, 4));
            remains.accept(pos.offset(15, 2, 5));
            remains.accept(pos.offset(15, 2, 9));
            remains.accept(pos.offset(15, 2, 11));
            remains.accept(pos.offset(16, 2, 8));
            remains.accept(pos.offset(16, 2, 9));
            remains.accept(pos.offset(16, 2, 11));
            remains.accept(pos.offset(17, 2, 8));
            remains.accept(pos.offset(3, 3, 5));
            remains.accept(pos.offset(3, 3, 6));
            remains.accept(pos.offset(3, 3, 7));
            remains.accept(pos.offset(3, 3, 8));
            remains.accept(pos.offset(4, 3, 5));
            remains.accept(pos.offset(4, 3, 6));
            remains.accept(pos.offset(5, 3, 10));
            remains.accept(pos.offset(6, 3, 5));
            remains.accept(pos.offset(6, 3, 6));
            remains.accept(pos.offset(6, 3, 7));
            remains.accept(pos.offset(6, 3, 8));
            remains.accept(pos.offset(6, 3, 9));
            remains.accept(pos.offset(6, 3, 10));
            remains.accept(pos.offset(6, 3, 14));
            remains.accept(pos.offset(7, 3, 12));
            remains.accept(pos.offset(7, 3, 14));
            remains.accept(pos.offset(8, 3, 11));
            remains.accept(pos.offset(8, 3, 12));
            remains.accept(pos.offset(8, 3, 14));
            remains.accept(pos.offset(9, 3, 6));
            remains.accept(pos.offset(9, 3, 8));
            remains.accept(pos.offset(9, 3, 15));
            remains.accept(pos.offset(9, 3, 16));
            remains.accept(pos.offset(10, 3, 3));
            remains.accept(pos.offset(10, 3, 6));
            remains.accept(pos.offset(10, 3, 8));
            remains.accept(pos.offset(10, 3, 9));
            remains.accept(pos.offset(10, 3, 12));
            remains.accept(pos.offset(10, 3, 13));
            remains.accept(pos.offset(11, 3, 3));
            remains.accept(pos.offset(11, 3, 4));
            remains.accept(pos.offset(11, 3, 6));
            remains.accept(pos.offset(11, 3, 8));
            remains.accept(pos.offset(12, 3, 11));
            remains.accept(pos.offset(12, 3, 12));
            remains.accept(pos.offset(12, 3, 13));
            remains.accept(pos.offset(12, 3, 14));
            remains.accept(pos.offset(13, 3, 6));
            remains.accept(pos.offset(13, 3, 7));
            remains.accept(pos.offset(13, 3, 10));
            remains.accept(pos.offset(13, 3, 14));
            remains.accept(pos.offset(14, 3, 9));
            remains.accept(pos.offset(14, 3, 10));
            remains.accept(pos.offset(14, 3, 11));
            remains.accept(pos.offset(15, 3, 9));
            remains.accept(pos.offset(15, 3, 11));
            remains.accept(pos.offset(15, 3, 12));
            remains.accept(pos.offset(16, 3, 12));
            remains.accept(pos.offset(4, 4, 6));
            remains.accept(pos.offset(5, 4, 6));
            remains.accept(pos.offset(6, 4, 7));
            remains.accept(pos.offset(6, 4, 8));
            remains.accept(pos.offset(8, 4, 10));
            remains.accept(pos.offset(8, 4, 11));
            remains.accept(pos.offset(8, 4, 14));
            remains.accept(pos.offset(9, 4, 9));
            remains.accept(pos.offset(9, 4, 10));
            remains.accept(pos.offset(9, 4, 14));
            remains.accept(pos.offset(9, 4, 15));
            remains.accept(pos.offset(10, 4, 6));
            remains.accept(pos.offset(10, 4, 7));
            remains.accept(pos.offset(10, 4, 8));
            remains.accept(pos.offset(10, 4, 12));
            remains.accept(pos.offset(11, 4, 4));
            remains.accept(pos.offset(11, 4, 5));
            remains.accept(pos.offset(11, 4, 7));
            remains.accept(pos.offset(11, 4, 8));
            remains.accept(pos.offset(12, 4, 7));
            remains.accept(pos.offset(12, 4, 8));
            remains.accept(pos.offset(12, 4, 10));
            remains.accept(pos.offset(12, 4, 11));
            remains.accept(pos.offset(13, 4, 7));
            remains.accept(pos.offset(13, 4, 10));
            remains.accept(pos.offset(13, 4, 11));
            remains.accept(pos.offset(14, 4, 11));
            remains.accept(pos.offset(5, 5, 6));
            remains.accept(pos.offset(5, 5, 7));
            remains.accept(pos.offset(6, 5, 6));
            remains.accept(pos.offset(6, 5, 7));
            remains.accept(pos.offset(6, 5, 8));
            remains.accept(pos.offset(7, 5, 7));
            remains.accept(pos.offset(9, 5, 7));
            remains.accept(pos.offset(9, 5, 8));
            remains.accept(pos.offset(9, 5, 9));
            remains.accept(pos.offset(9, 5, 14));
            remains.accept(pos.offset(10, 5, 6));
            remains.accept(pos.offset(10, 5, 7));
            remains.accept(pos.offset(10, 5, 8));
            remains.accept(pos.offset(10, 5, 12));
            remains.accept(pos.offset(10, 5, 13));
            remains.accept(pos.offset(10, 5, 14));
            remains.accept(pos.offset(11, 5, 5));
            remains.accept(pos.offset(11, 5, 6));
            remains.accept(pos.offset(11, 5, 7));
            remains.accept(pos.offset(11, 5, 8));
            remains.accept(pos.offset(12, 5, 8));
            remains.accept(pos.offset(12, 5, 9));
            remains.accept(pos.offset(12, 5, 10));
            remains.accept(pos.offset(7, 6, 7));
            remains.accept(pos.offset(8, 6, 7));
            remains.accept(pos.offset(9, 6, 7));
            remains.accept(pos.offset(9, 6, 8));
            remains.accept(pos.offset(9, 6, 9));
            remains.accept(pos.offset(10, 6, 7));
            remains.accept(pos.offset(10, 6, 8));
            remains.accept(pos.offset(10, 6, 9));
            remains.accept(pos.offset(10, 6, 10));
            remains.accept(pos.offset(10, 6, 11));
            remains.accept(pos.offset(10, 6, 12));
            remains.accept(pos.offset(11, 6, 7));
            remains.accept(pos.offset(11, 6, 8));
            remains.accept(pos.offset(11, 6, 9));
            remains.accept(pos.offset(12, 6, 8));
            remains.accept(pos.offset(12, 6, 9));
            remains.accept(pos.offset(9, 7, 7));
            remains.accept(pos.offset(9, 7, 8));
            remains.accept(pos.offset(9, 7, 9));
            remains.accept(pos.offset(10, 7, 7));
            remains.accept(pos.offset(10, 7, 8));
            remains.accept(pos.offset(10, 7, 9));
            remains.accept(pos.offset(11, 7, 7));
            remains.accept(pos.offset(11, 7, 8));
            remains.accept(pos.offset(11, 7, 9));
            block.accept(state1, pos.offset(8, 8, 7));
            block.accept(state1, pos.offset(8, 8, 8));
            block.accept(state1, pos.offset(8, 8, 9));
            block.accept(state2, pos.offset(9, 8, 6));
            remains.accept(pos.offset(9, 8, 7));
            remains.accept(pos.offset(9, 8, 8));
            remains.accept(pos.offset(9, 8, 9));
            block.accept(state2, pos.offset(9, 8, 10));
            block.accept(state2, pos.offset(10, 8, 6));
            remains.accept(pos.offset(10, 8, 7));
            remains.accept(pos.offset(10, 8, 8));
            remains.accept(pos.offset(10, 8, 9));
            block.accept(state2, pos.offset(10, 8, 10));
            block.accept(state2, pos.offset(11, 8, 6));
            remains.accept(pos.offset(11, 8, 7));
            remains.accept(pos.offset(11, 8, 8));
            remains.accept(pos.offset(11, 8, 9));
            block.accept(state1, pos.offset(11, 8, 10));
            block.accept(state3, pos.offset(12, 8, 7));
            block.accept(state3, pos.offset(12, 8, 8));
            block.accept(state3, pos.offset(12, 8, 9));
            block.accept(state1, pos.offset(8, 9, 7));
            block.accept(state1, pos.offset(8, 9, 8));
            block.accept(state1, pos.offset(8, 9, 9));
            block.accept(state2, pos.offset(9, 9, 6));
            remains.accept(pos.offset(9, 9, 7));
            remains.accept(pos.offset(9, 9, 8));
            remains.accept(pos.offset(9, 9, 9));
            block.accept(state2, pos.offset(9, 9, 10));
            block.accept(state2, pos.offset(10, 9, 6));
            remains.accept(pos.offset(10, 9, 7));
            remains.accept(pos.offset(10, 9, 9));
            block.accept(state2, pos.offset(10, 9, 10));
            block.accept(state2, pos.offset(11, 9, 6));
            remains.accept(pos.offset(11, 9, 7));
            remains.accept(pos.offset(11, 9, 8));
            remains.accept(pos.offset(11, 9, 9));
            block.accept(state2, pos.offset(11, 9, 10));
            block.accept(state1, pos.offset(12, 9, 7));
            block.accept(state3, pos.offset(12, 9, 8));
            block.accept(state3, pos.offset(12, 9, 9));
            block.accept(state1, pos.offset(8, 10, 7));
            block.accept(state1, pos.offset(8, 10, 8));
            block.accept(state1, pos.offset(8, 10, 9));
            block.accept(state2, pos.offset(9, 10, 6));
            remains.accept(pos.offset(9, 10, 7));
            remains.accept(pos.offset(9, 10, 8));
            remains.accept(pos.offset(9, 10, 9));
            block.accept(state2, pos.offset(9, 10, 10));
            block.accept(state2, pos.offset(10, 10, 6));
            remains.accept(pos.offset(10, 10, 7));
            remains.accept(pos.offset(10, 10, 8));
            remains.accept(pos.offset(10, 10, 9));
            block.accept(state1, pos.offset(10, 10, 10));
            block.accept(state1, pos.offset(11, 10, 6));
            remains.accept(pos.offset(11, 10, 7));
            remains.accept(pos.offset(11, 10, 8));
            remains.accept(pos.offset(11, 10, 9));
            block.accept(state1, pos.offset(11, 10, 10));
            block.accept(state3, pos.offset(12, 10, 7));
            block.accept(state3, pos.offset(12, 10, 8));
            block.accept(state3, pos.offset(12, 10, 9));
            block.accept(state1, pos.offset(8, 11, 7));
            block.accept(state1, pos.offset(8, 11, 8));
            block.accept(state1, pos.offset(8, 11, 9));
            block.accept(state2, pos.offset(9, 11, 6));
            block.accept(state1, pos.offset(9, 11, 7));
            block.accept(state1, pos.offset(9, 11, 8));
            block.accept(state1, pos.offset(9, 11, 9));
            block.accept(state1, pos.offset(9, 11, 10));
            block.accept(state2, pos.offset(10, 11, 6));
            block.accept(state1, pos.offset(10, 11, 7));
            block.accept(state1, pos.offset(10, 11, 8));
            block.accept(state1, pos.offset(10, 11, 9));
            block.accept(state1, pos.offset(10, 11, 10));
            block.accept(state2, pos.offset(11, 11, 6));
            block.accept(state1, pos.offset(11, 11, 7));
            block.accept(state1, pos.offset(11, 11, 8));
            block.accept(state1, pos.offset(11, 11, 9));
            block.accept(state1, pos.offset(11, 11, 10));
            block.accept(state1, pos.offset(12, 11, 7));
            block.accept(state1, pos.offset(12, 11, 8));
            block.accept(state1, pos.offset(12, 11, 9));
            block.accept(state4, pos.offset(8, 12, 7));
            block.accept(state4, pos.offset(8, 12, 8));
            block.accept(state4, pos.offset(8, 12, 9));
            block.accept(state4, pos.offset(9, 12, 6));
            block.accept(state4, pos.offset(9, 12, 7));
            block.accept(state4, pos.offset(9, 12, 8));
            block.accept(state4, pos.offset(9, 12, 9));
            block.accept(state4, pos.offset(9, 12, 10));
            block.accept(state4, pos.offset(10, 12, 6));
            block.accept(state4, pos.offset(10, 12, 9));
            block.accept(state4, pos.offset(10, 12, 10));
            block.accept(state4, pos.offset(11, 12, 9));
            block.accept(state4, pos.offset(11, 12, 10));
            block.accept(state4, pos.offset(12, 12, 8));
            block.accept(state4, pos.offset(12, 12, 9));
            block.accept(state4, pos.offset(8, 13, 7));
            block.accept(state4, pos.offset(8, 13, 8));
            block.accept(state4, pos.offset(8, 13, 9));
            block.accept(state4, pos.offset(9, 13, 9));
            block.accept(state4, pos.offset(9, 13, 10));
            block.accept(state4, pos.offset(10, 13, 10));
            block.accept(state4, pos.offset(11, 13, 10));
            block.accept(state5, pos.offset(12, 12, 6));
            block.accept(state5, pos.offset(8, 13, 5));
            block.accept(state5, pos.offset(9, 13, 5));
            block.accept(state5, pos.offset(10, 13, 5));
            block.accept(state5, pos.offset(10, 13, 6));
            block.accept(state5, pos.offset(10, 13, 7));
            block.accept(state5, pos.offset(10, 13, 8));
            block.accept(state5, pos.offset(11, 13, 5));
            block.accept(state5, pos.offset(11, 13, 6));
            block.accept(state5, pos.offset(11, 13, 7));
            block.accept(state5, pos.offset(11, 13, 8));
            block.accept(state5, pos.offset(12, 13, 6));
            block.accept(state5, pos.offset(12, 13, 7));
            block.accept(state5, pos.offset(12, 13, 8));
            block.accept(state5, pos.offset(13, 13, 7));
            block.accept(state5, pos.offset(13, 13, 8));
            block.accept(state5, pos.offset(13, 13, 9));
            block.accept(state5, pos.offset(13, 13, 10));
            block.accept(state6, pos.offset(10, 9, 8));
        }

        replaceRoots(block, random);
    }

    protected void replaceRoots(BiConsumer<BlockState, BlockPos> blocksetter, @NotNull RandomSource random) {
        BlockState state = ModBlocks.ACTIVE_VULNERABLE_REMAINS.get().defaultBlockState();
        List<BlockPos> availablePositions = new ArrayList<>() {{
            add(new BlockPos(0,1,5));
            add(new BlockPos(5,1,1));
            add(new BlockPos(8,1,7));
            add(new BlockPos(10,1,11));
            add(new BlockPos(3,2,11));
            add(new BlockPos(3,3,5));
            add(new BlockPos(7,3,12));
            add(new BlockPos(10,3,3));
            add(new BlockPos(12,3,14));
            add(new BlockPos(15,3,9));
            add(new BlockPos(16,3,12));
            add(new BlockPos(9,4,15));
            add(new BlockPos(6,5,8));
            add(new BlockPos(11,5,5));
            add(new BlockPos(12,5,10));
        }};
        int vulnerabilities = random.nextInt(3) + 6;
        for (int i = 0; i < vulnerabilities; i++) {
            BlockPos pos = availablePositions.get(random.nextInt(availablePositions.size()));
            availablePositions.remove(pos);
            blocksetter.accept(state, pos);
        }
    }
}
