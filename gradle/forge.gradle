repositories {
    maven { // original jei release
        url "https://dvs1.progwml6.com/files/maven"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev/"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        //Local repo for custom forge builds.
        //Is not required to exist
        name = "LocalForge"
        url = "../../MinecraftForge/repo/"
    }
    maven {
        name = "Maxanier"
        url = "https://maven.maxanier.de/releases"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    mavenCentral()
    mavenLocal()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    //Don't export dependencies to pom as their deobfuscated version would be used which cannot be found in dependent projects
    if (include_jei) {
        compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}-common-api:${project.jei_version}") //API for compile
        compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}-forge-api:${project.jei_version}") //API for compile
        runtimeOnly fg.deobf("mezz.jei:jei-${jei_mc_version}-forge:${project.jei_version}") //Full for runtime
    }

    if (include_guideapi) {
        compileOnly fg.deobf("de.maxanier.guideapi:Guide-API-VP:${project.guideapi_version}")
        runtimeOnly fg.deobf("de.maxanier.guideapi:Guide-API-VP:${project.guideapi_version}")
    }

    if (include_terrablender) {
        compileOnly fg.deobf("com.github.glitchfiend:TerraBlender-forge:${project.terrablender_version}")
        runtimeOnly fg.deobf("com.github.glitchfiend:TerraBlender-forge:${project.terrablender_version}")
    }
}

minecraft {
    mappings channel: project.mappings_channel, version: mappings_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true

    runs {
        configureEach {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'debug'
            property 'forge.logging.markers', 'REGISTRIES'
            jvmArg '-ea:de.teamlapen...'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.api
                    source sourceSets.lib
                }
            }
        }

        client {
            taskName 'runClient1'
            workingDirectory project.file('run/client1').canonicalPath
            property 'vampirism_target', 'dev_client'
        }
        client2 {
            parent runs.client
            taskName 'runClient2'
            arg '--username=Dev2'
        }
        // the same as runClient1 but with JBR only arguments
        clientJBR {
            parent runs.client
            taskName 'runClientJBR'
            jvmArg "-XX:+AllowEnhancedClassRedefinition"
        }
        server {
            workingDirectory project.file('run/server').canonicalPath
            property 'vampirism_target', 'dev_server'
        }
        data {
            property 'vampirism_target', 'dev_data'
            workingDirectory project.file('run/data').canonicalPath
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'),  '--existing', file('src/main/resources/')
        }
    }

}

// https://github.com/SpongePowered/Mixin/wiki/Mixins-on-Minecraft-Forge
mixin {
    add sourceSets.main, "vampirism.refmap.json"
    config 'vampirism.mixins.json'

    debug.verbose = true
    debug.export = true
}